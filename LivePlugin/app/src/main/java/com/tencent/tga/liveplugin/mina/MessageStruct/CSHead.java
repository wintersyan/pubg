// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\CSHead.proto
package com.tencent.tga.liveplugin.mina.MessageStruct;


import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;

import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Datatype.UINT64;


public final class CSHead extends Message {

  public static final Integer DEFAULT_COMMAND = 0;
  public static final Integer DEFAULT_SUBCMD = 0;
  public static final Integer DEFAULT_SEQ = 0;
  public static final ByteString DEFAULT_USER_ID = ByteString.EMPTY;
  public static final Integer DEFAULT_CLIENT_TYPE = 0;
  public static final Integer DEFAULT_HEAD_FLAG = 0;
  public static final Integer DEFAULT_CLIENT_VER = 0;
  public static final ByteString DEFAULT_SIGNATURE = ByteString.EMPTY;
  public static final Long DEFAULT_UIN = 0L;
  public static final ByteString DEFAULT_EXT = ByteString.EMPTY;
  public static final Integer DEFAULT_RESULT = 0;

  @ProtoField(tag = 1, type = UINT32)
  public final Integer command;

  /**
   * 大命令
   */
  @ProtoField(tag = 2, type = UINT32)
  public final Integer subcmd;

  /**
   * 子命令
   */
  @ProtoField(tag = 3, type = UINT32)
  public final Integer seq;

  /**
   * 客户端seq
   */
  @ProtoField(tag = 4, type = BYTES)
  public final ByteString user_id;

  /**
   * 用户身份id，使用UUID填充
   */
  @ProtoField(tag = 5, type = UINT32)
  public final Integer client_type;

  /**
   * 终端类型
   */
  @ProtoField(tag = 6, type = UINT32)
  public final Integer head_flag;

  /**
   * 包头标记
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer client_ver;

  /**
   * 客户端版本号
   */
  @ProtoField(tag = 8, type = BYTES)
  public final ByteString signature;

  /**
   * 用户签名
   */
  @ProtoField(tag = 9, type = UINT64)
  public final Long uin;

  @ProtoField(tag = 10, type = BYTES)
  public final ByteString ext;

  /**
   * 用于扩展
   */
  @ProtoField(tag = 11, type = UINT32)
  public final Integer result;

  public CSHead(Integer command, Integer subcmd, Integer seq, ByteString user_id, Integer client_type, Integer head_flag, Integer client_ver, ByteString signature, Long uin, ByteString ext, Integer result) {
    this.command = command;
    this.subcmd = subcmd;
    this.seq = seq;
    this.user_id = user_id;
    this.client_type = client_type;
    this.head_flag = head_flag;
    this.client_ver = client_ver;
    this.signature = signature;
    this.uin = uin;
    this.ext = ext;
    this.result = result;
  }

  private CSHead(Builder builder) {
    this(builder.command, builder.subcmd, builder.seq, builder.user_id, builder.client_type, builder.head_flag, builder.client_ver, builder.signature, builder.uin, builder.ext, builder.result);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CSHead)) return false;
    CSHead o = (CSHead) other;
    return equals(command, o.command)
        && equals(subcmd, o.subcmd)
        && equals(seq, o.seq)
        && equals(user_id, o.user_id)
        && equals(client_type, o.client_type)
        && equals(head_flag, o.head_flag)
        && equals(client_ver, o.client_ver)
        && equals(signature, o.signature)
        && equals(uin, o.uin)
        && equals(ext, o.ext)
        && equals(result, o.result);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = command != null ? command.hashCode() : 0;
      result = result * 37 + (subcmd != null ? subcmd.hashCode() : 0);
      result = result * 37 + (seq != null ? seq.hashCode() : 0);
      result = result * 37 + (user_id != null ? user_id.hashCode() : 0);
      result = result * 37 + (client_type != null ? client_type.hashCode() : 0);
      result = result * 37 + (head_flag != null ? head_flag.hashCode() : 0);
      result = result * 37 + (client_ver != null ? client_ver.hashCode() : 0);
      result = result * 37 + (signature != null ? signature.hashCode() : 0);
      result = result * 37 + (uin != null ? uin.hashCode() : 0);
      result = result * 37 + (ext != null ? ext.hashCode() : 0);
      result = result * 37 + (this.result != null ? this.result.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<CSHead> {

    public Integer command;
    public Integer subcmd;
    public Integer seq;
    public ByteString user_id;
    public Integer client_type;
    public Integer head_flag;
    public Integer client_ver;
    public ByteString signature;
    public Long uin;
    public ByteString ext;
    public Integer result;

    public Builder() {
    }

    public Builder(CSHead message) {
      super(message);
      if (message == null) return;
      this.command = message.command;
      this.subcmd = message.subcmd;
      this.seq = message.seq;
      this.user_id = message.user_id;
      this.client_type = message.client_type;
      this.head_flag = message.head_flag;
      this.client_ver = message.client_ver;
      this.signature = message.signature;
      this.uin = message.uin;
      this.ext = message.ext;
      this.result = message.result;
    }

    public Builder command(Integer command) {
      this.command = command;
      return this;
    }

    /**
     * 大命令
     */
    public Builder subcmd(Integer subcmd) {
      this.subcmd = subcmd;
      return this;
    }

    /**
     * 子命令
     */
    public Builder seq(Integer seq) {
      this.seq = seq;
      return this;
    }

    /**
     * 客户端seq
     */
    public Builder user_id(ByteString user_id) {
      this.user_id = user_id;
      return this;
    }

    /**
     * 用户身份id，使用UUID填充
     */
    public Builder client_type(Integer client_type) {
      this.client_type = client_type;
      return this;
    }

    /**
     * 终端类型
     */
    public Builder head_flag(Integer head_flag) {
      this.head_flag = head_flag;
      return this;
    }

    /**
     * 包头标记
     */
    public Builder client_ver(Integer client_ver) {
      this.client_ver = client_ver;
      return this;
    }

    /**
     * 客户端版本号
     */
    public Builder signature(ByteString signature) {
      this.signature = signature;
      return this;
    }

    /**
     * 用户签名
     */
    public Builder uin(Long uin) {
      this.uin = uin;
      return this;
    }

    public Builder ext(ByteString ext) {
      this.ext = ext;
      return this;
    }

    /**
     * 用于扩展
     */
    public Builder result(Integer result) {
      this.result = result;
      return this;
    }

    @Override
    public CSHead build() {
      return new CSHead(this);
    }
  }
}
