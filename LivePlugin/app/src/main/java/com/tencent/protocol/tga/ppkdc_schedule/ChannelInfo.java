// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\ppkdc_schedule.proto
package com.tencent.protocol.tga.ppkdc_schedule;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REQUIRED;

public final class ChannelInfo extends Message {

  public static final Integer DEFAULT_SOURCE_ID = 0;
  public static final ByteString DEFAULT_SOURCE_NAME = ByteString.EMPTY;
  public static final ByteString DEFAULT_ROOM_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_VID = ByteString.EMPTY;
  public static final Integer DEFAULT_ONLINE_NUM = 0;
  public static final Integer DEFAULT_ROOM_TYPE = 0;
  public static final Integer DEFAULT_CURRENT_PLAY_TYPE = 0;
  public static final ByteString DEFAULT_CURRENT_TITLE = ByteString.EMPTY;
  public static final ByteString DEFAULT_RECORD_URL = ByteString.EMPTY;
  public static final ByteString DEFAULT_RECORD_TITLE = ByteString.EMPTY;

  @ProtoField(tag = 1, type = UINT32, label = REQUIRED)
  public final Integer source_id;

  /**
   * 频道id
   */
  @ProtoField(tag = 2, type = BYTES, label = REQUIRED)
  public final ByteString source_name;

  /**
   * 赛事名
   */
  @ProtoField(tag = 3, type = BYTES, label = REQUIRED)
  public final ByteString room_id;

  /**
   * 房间id
   */
  @ProtoField(tag = 4, type = BYTES, label = REQUIRED)
  public final ByteString vid;

  /**
   * 频道id
   */
  @ProtoField(tag = 5, type = UINT32)
  public final Integer online_num;

  /**
   * 在线人数
   */
  @ProtoField(tag = 6, type = UINT32)
  public final Integer room_type;

  /**
   * 房间类型,0: 腾讯视频
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer current_play_type;

  /**
   * 当前播放类型,参见 VideoPlayType 0: 直播, 1: 回放, 2：节目
   */
  @ProtoField(tag = 9, type = BYTES)
  public final ByteString current_title;

  /**
   * 当前播放标题
   */
  @ProtoField(tag = 10, type = BYTES)
  public final ByteString record_url;

  /**
   * 频道图片的url
   */
  @ProtoField(tag = 11, type = BYTES)
  public final ByteString record_title;

  /**
   * 频道图片的标题,已废弃
   */
  @ProtoField(tag = 12)
  public final MatchItem running_match;

  public ChannelInfo(Integer source_id, ByteString source_name, ByteString room_id, ByteString vid, Integer online_num, Integer room_type, Integer current_play_type, ByteString current_title, ByteString record_url, ByteString record_title, MatchItem running_match) {
    this.source_id = source_id;
    this.source_name = source_name;
    this.room_id = room_id;
    this.vid = vid;
    this.online_num = online_num;
    this.room_type = room_type;
    this.current_play_type = current_play_type;
    this.current_title = current_title;
    this.record_url = record_url;
    this.record_title = record_title;
    this.running_match = running_match;
  }

  private ChannelInfo(Builder builder) {
    this(builder.source_id, builder.source_name, builder.room_id, builder.vid, builder.online_num, builder.room_type, builder.current_play_type, builder.current_title, builder.record_url, builder.record_title, builder.running_match);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChannelInfo)) return false;
    ChannelInfo o = (ChannelInfo) other;
    return equals(source_id, o.source_id)
        && equals(source_name, o.source_name)
        && equals(room_id, o.room_id)
        && equals(vid, o.vid)
        && equals(online_num, o.online_num)
        && equals(room_type, o.room_type)
        && equals(current_play_type, o.current_play_type)
        && equals(current_title, o.current_title)
        && equals(record_url, o.record_url)
        && equals(record_title, o.record_title)
        && equals(running_match, o.running_match);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = source_id != null ? source_id.hashCode() : 0;
      result = result * 37 + (source_name != null ? source_name.hashCode() : 0);
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      result = result * 37 + (vid != null ? vid.hashCode() : 0);
      result = result * 37 + (online_num != null ? online_num.hashCode() : 0);
      result = result * 37 + (room_type != null ? room_type.hashCode() : 0);
      result = result * 37 + (current_play_type != null ? current_play_type.hashCode() : 0);
      result = result * 37 + (current_title != null ? current_title.hashCode() : 0);
      result = result * 37 + (record_url != null ? record_url.hashCode() : 0);
      result = result * 37 + (record_title != null ? record_title.hashCode() : 0);
      result = result * 37 + (running_match != null ? running_match.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ChannelInfo> {

    public Integer source_id;
    public ByteString source_name;
    public ByteString room_id;
    public ByteString vid;
    public Integer online_num;
    public Integer room_type;
    public Integer current_play_type;
    public ByteString current_title;
    public ByteString record_url;
    public ByteString record_title;
    public MatchItem running_match;

    public Builder() {
    }

    public Builder(ChannelInfo message) {
      super(message);
      if (message == null) return;
      this.source_id = message.source_id;
      this.source_name = message.source_name;
      this.room_id = message.room_id;
      this.vid = message.vid;
      this.online_num = message.online_num;
      this.room_type = message.room_type;
      this.current_play_type = message.current_play_type;
      this.current_title = message.current_title;
      this.record_url = message.record_url;
      this.record_title = message.record_title;
      this.running_match = message.running_match;
    }

    public Builder source_id(Integer source_id) {
      this.source_id = source_id;
      return this;
    }

    /**
     * 频道id
     */
    public Builder source_name(ByteString source_name) {
      this.source_name = source_name;
      return this;
    }

    /**
     * 赛事名
     */
    public Builder room_id(ByteString room_id) {
      this.room_id = room_id;
      return this;
    }

    /**
     * 房间id
     */
    public Builder vid(ByteString vid) {
      this.vid = vid;
      return this;
    }

    /**
     * 频道id
     */
    public Builder online_num(Integer online_num) {
      this.online_num = online_num;
      return this;
    }

    /**
     * 在线人数
     */
    public Builder room_type(Integer room_type) {
      this.room_type = room_type;
      return this;
    }

    /**
     * 房间类型,0: 腾讯视频
     */
    public Builder current_play_type(Integer current_play_type) {
      this.current_play_type = current_play_type;
      return this;
    }

    /**
     * 当前播放类型,参见 VideoPlayType 0: 直播, 1: 回放, 2：节目
     */
    public Builder current_title(ByteString current_title) {
      this.current_title = current_title;
      return this;
    }

    /**
     * 当前播放标题
     */
    public Builder record_url(ByteString record_url) {
      this.record_url = record_url;
      return this;
    }

    /**
     * 频道图片的url
     */
    public Builder record_title(ByteString record_title) {
      this.record_title = record_title;
      return this;
    }

    /**
     * 频道图片的标题,已废弃
     */
    public Builder running_match(MatchItem running_match) {
      this.running_match = running_match;
      return this;
    }

    @Override
    public ChannelInfo build() {
      checkRequiredFields();
      return new ChannelInfo(this);
    }
  }
}
