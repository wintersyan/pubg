// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\ppkdc_schedule.proto
package com.tencent.protocol.tga.ppkdc_schedule;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import java.util.Collections;
import java.util.List;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BOOL;
import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REPEATED;
import static com.squareup.tga.Message.Label.REQUIRED;

public final class MatchItem extends Message {

  public static final ByteString DEFAULT_MATCH_ID = ByteString.EMPTY;
  public static final Integer DEFAULT_MATCH_STATE = 0;
  public static final ByteString DEFAULT_MATCH_TIME = ByteString.EMPTY;
  public static final ByteString DEFAULT_MATCH_MAIN_TITLE = ByteString.EMPTY;
  public static final ByteString DEFAULT_MATCH_SUB_TITLE = ByteString.EMPTY;
  public static final ByteString DEFAULT_HOST_TEAM_NAME = ByteString.EMPTY;
  public static final ByteString DEFAULT_HOST_TEAM_LOGO = ByteString.EMPTY;
  public static final ByteString DEFAULT_GUEST_TEAM_NAME = ByteString.EMPTY;
  public static final ByteString DEFAULT_GUEST_TEAM_LOGO = ByteString.EMPTY;
  public static final Integer DEFAULT_HOST_TEAM_SCORE = 0;
  public static final Integer DEFAULT_GUEST_TEAM_SCORE = 0;
  public static final ByteString DEFAULT_ROOM_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_VID = ByteString.EMPTY;
  public static final Integer DEFAULT_ONLINE_NUM = 0;
  public static final Integer DEFAULT_SUBCRIBE_STATE = 0;
  public static final Integer DEFAULT_ROOM_TYPE = 0;
  public static final List<ByteString> DEFAULT_RECORD_VID_LIST = Collections.emptyList();
  public static final ByteString DEFAULT_HOST_TEAM_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_GUEST_TEAM_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_HOST_VOTE_NUM = ByteString.EMPTY;
  public static final ByteString DEFAULT_GUEST_VOTE_NUM = ByteString.EMPTY;
  public static final Boolean DEFAULT_HAS_CHEER = false;

  @ProtoField(tag = 1, type = BYTES, label = REQUIRED)
  public final ByteString match_id;

  /**
   * 赛事id
   */
  @ProtoField(tag = 2, type = UINT32, label = REQUIRED)
  public final Integer match_state;

  /**
   * 赛事状态,参见 MatchState
   */
  @ProtoField(tag = 3, type = BYTES, label = REQUIRED)
  public final ByteString match_time;

  /**
   * 比赛时间
   */
  @ProtoField(tag = 4, type = BYTES, label = REQUIRED)
  public final ByteString match_main_title;

  /**
   * 赛事名称——主标题
   */
  @ProtoField(tag = 5, type = BYTES, label = REQUIRED)
  public final ByteString match_sub_title;

  /**
   * 赛事名称——副标题
   */
  @ProtoField(tag = 6, type = BYTES, label = REQUIRED)
  public final ByteString host_team_name;

  /**
   * 主队名称
   */
  @ProtoField(tag = 7, type = BYTES, label = REQUIRED)
  public final ByteString host_team_logo;

  /**
   * 主队logo
   */
  @ProtoField(tag = 8, type = BYTES, label = REQUIRED)
  public final ByteString guest_team_name;

  /**
   * 客队名称
   */
  @ProtoField(tag = 9, type = BYTES, label = REQUIRED)
  public final ByteString guest_team_logo;

  /**
   * 客队logo
   */
  @ProtoField(tag = 10, type = UINT32)
  public final Integer host_team_score;

  /**
   * 主队得分
   */
  @ProtoField(tag = 11, type = UINT32)
  public final Integer guest_team_score;

  /**
   * 客队得分
   */
  @ProtoField(tag = 12, type = BYTES)
  public final ByteString room_id;

  /**
   * 房间id[注意:多赛事请勿使用!]
   */
  @ProtoField(tag = 13, type = BYTES)
  public final ByteString vid;

  /**
   * 频道id[注意:多赛事请勿使用!]
   */
  @ProtoField(tag = 14, type = UINT32)
  public final Integer online_num;

  /**
   * 在线人数,不要使用[注意:多赛事请勿使用!]
   */
  @ProtoField(tag = 15, type = UINT32)
  public final Integer subcribe_state;

  /**
   * 订阅状态, 0未订阅,1已订阅
   */
  @ProtoField(tag = 16, type = UINT32)
  public final Integer room_type;

  /**
   * 房间类型,0: 腾讯视频, 1:鹅掌TV视频流[注意:多赛事请勿使用!]
   */
  @ProtoField(tag = 17, type = BYTES, label = REPEATED)
  public final List<ByteString> record_vid_list;

  /**
   * 回访视频id列表
   */
  @ProtoField(tag = 18, type = BYTES)
  public final ByteString host_team_id;

  /**
   * 主队id
   */
  @ProtoField(tag = 19, type = BYTES)
  public final ByteString guest_team_id;

  /**
   * 客队id
   */
  @ProtoField(tag = 20, type = BYTES)
  public final ByteString host_vote_num;

  /**
   * 主队得票数
   */
  @ProtoField(tag = 21, type = BYTES)
  public final ByteString guest_vote_num;

  /**
   * 客队得票数
   */
  @ProtoField(tag = 22, type = BOOL)
  public final Boolean has_cheer;

  public MatchItem(ByteString match_id, Integer match_state, ByteString match_time, ByteString match_main_title, ByteString match_sub_title, ByteString host_team_name, ByteString host_team_logo, ByteString guest_team_name, ByteString guest_team_logo, Integer host_team_score, Integer guest_team_score, ByteString room_id, ByteString vid, Integer online_num, Integer subcribe_state, Integer room_type, List<ByteString> record_vid_list, ByteString host_team_id, ByteString guest_team_id, ByteString host_vote_num, ByteString guest_vote_num, Boolean has_cheer) {
    this.match_id = match_id;
    this.match_state = match_state;
    this.match_time = match_time;
    this.match_main_title = match_main_title;
    this.match_sub_title = match_sub_title;
    this.host_team_name = host_team_name;
    this.host_team_logo = host_team_logo;
    this.guest_team_name = guest_team_name;
    this.guest_team_logo = guest_team_logo;
    this.host_team_score = host_team_score;
    this.guest_team_score = guest_team_score;
    this.room_id = room_id;
    this.vid = vid;
    this.online_num = online_num;
    this.subcribe_state = subcribe_state;
    this.room_type = room_type;
    this.record_vid_list = immutableCopyOf(record_vid_list);
    this.host_team_id = host_team_id;
    this.guest_team_id = guest_team_id;
    this.host_vote_num = host_vote_num;
    this.guest_vote_num = guest_vote_num;
    this.has_cheer = has_cheer;
  }

  private MatchItem(Builder builder) {
    this(builder.match_id, builder.match_state, builder.match_time, builder.match_main_title, builder.match_sub_title, builder.host_team_name, builder.host_team_logo, builder.guest_team_name, builder.guest_team_logo, builder.host_team_score, builder.guest_team_score, builder.room_id, builder.vid, builder.online_num, builder.subcribe_state, builder.room_type, builder.record_vid_list, builder.host_team_id, builder.guest_team_id, builder.host_vote_num, builder.guest_vote_num, builder.has_cheer);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MatchItem)) return false;
    MatchItem o = (MatchItem) other;
    return equals(match_id, o.match_id)
        && equals(match_state, o.match_state)
        && equals(match_time, o.match_time)
        && equals(match_main_title, o.match_main_title)
        && equals(match_sub_title, o.match_sub_title)
        && equals(host_team_name, o.host_team_name)
        && equals(host_team_logo, o.host_team_logo)
        && equals(guest_team_name, o.guest_team_name)
        && equals(guest_team_logo, o.guest_team_logo)
        && equals(host_team_score, o.host_team_score)
        && equals(guest_team_score, o.guest_team_score)
        && equals(room_id, o.room_id)
        && equals(vid, o.vid)
        && equals(online_num, o.online_num)
        && equals(subcribe_state, o.subcribe_state)
        && equals(room_type, o.room_type)
        && equals(record_vid_list, o.record_vid_list)
        && equals(host_team_id, o.host_team_id)
        && equals(guest_team_id, o.guest_team_id)
        && equals(host_vote_num, o.host_vote_num)
        && equals(guest_vote_num, o.guest_vote_num)
        && equals(has_cheer, o.has_cheer);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = match_id != null ? match_id.hashCode() : 0;
      result = result * 37 + (match_state != null ? match_state.hashCode() : 0);
      result = result * 37 + (match_time != null ? match_time.hashCode() : 0);
      result = result * 37 + (match_main_title != null ? match_main_title.hashCode() : 0);
      result = result * 37 + (match_sub_title != null ? match_sub_title.hashCode() : 0);
      result = result * 37 + (host_team_name != null ? host_team_name.hashCode() : 0);
      result = result * 37 + (host_team_logo != null ? host_team_logo.hashCode() : 0);
      result = result * 37 + (guest_team_name != null ? guest_team_name.hashCode() : 0);
      result = result * 37 + (guest_team_logo != null ? guest_team_logo.hashCode() : 0);
      result = result * 37 + (host_team_score != null ? host_team_score.hashCode() : 0);
      result = result * 37 + (guest_team_score != null ? guest_team_score.hashCode() : 0);
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      result = result * 37 + (vid != null ? vid.hashCode() : 0);
      result = result * 37 + (online_num != null ? online_num.hashCode() : 0);
      result = result * 37 + (subcribe_state != null ? subcribe_state.hashCode() : 0);
      result = result * 37 + (room_type != null ? room_type.hashCode() : 0);
      result = result * 37 + (record_vid_list != null ? record_vid_list.hashCode() : 1);
      result = result * 37 + (host_team_id != null ? host_team_id.hashCode() : 0);
      result = result * 37 + (guest_team_id != null ? guest_team_id.hashCode() : 0);
      result = result * 37 + (host_vote_num != null ? host_vote_num.hashCode() : 0);
      result = result * 37 + (guest_vote_num != null ? guest_vote_num.hashCode() : 0);
      result = result * 37 + (has_cheer != null ? has_cheer.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MatchItem> {

    public ByteString match_id;
    public Integer match_state;
    public ByteString match_time;
    public ByteString match_main_title;
    public ByteString match_sub_title;
    public ByteString host_team_name;
    public ByteString host_team_logo;
    public ByteString guest_team_name;
    public ByteString guest_team_logo;
    public Integer host_team_score;
    public Integer guest_team_score;
    public ByteString room_id;
    public ByteString vid;
    public Integer online_num;
    public Integer subcribe_state;
    public Integer room_type;
    public List<ByteString> record_vid_list;
    public ByteString host_team_id;
    public ByteString guest_team_id;
    public ByteString host_vote_num;
    public ByteString guest_vote_num;
    public Boolean has_cheer;

    public Builder() {
    }

    public Builder(MatchItem message) {
      super(message);
      if (message == null) return;
      this.match_id = message.match_id;
      this.match_state = message.match_state;
      this.match_time = message.match_time;
      this.match_main_title = message.match_main_title;
      this.match_sub_title = message.match_sub_title;
      this.host_team_name = message.host_team_name;
      this.host_team_logo = message.host_team_logo;
      this.guest_team_name = message.guest_team_name;
      this.guest_team_logo = message.guest_team_logo;
      this.host_team_score = message.host_team_score;
      this.guest_team_score = message.guest_team_score;
      this.room_id = message.room_id;
      this.vid = message.vid;
      this.online_num = message.online_num;
      this.subcribe_state = message.subcribe_state;
      this.room_type = message.room_type;
      this.record_vid_list = copyOf(message.record_vid_list);
      this.host_team_id = message.host_team_id;
      this.guest_team_id = message.guest_team_id;
      this.host_vote_num = message.host_vote_num;
      this.guest_vote_num = message.guest_vote_num;
      this.has_cheer = message.has_cheer;
    }

    public Builder match_id(ByteString match_id) {
      this.match_id = match_id;
      return this;
    }

    /**
     * 赛事id
     */
    public Builder match_state(Integer match_state) {
      this.match_state = match_state;
      return this;
    }

    /**
     * 赛事状态,参见 MatchState
     */
    public Builder match_time(ByteString match_time) {
      this.match_time = match_time;
      return this;
    }

    /**
     * 比赛时间
     */
    public Builder match_main_title(ByteString match_main_title) {
      this.match_main_title = match_main_title;
      return this;
    }

    /**
     * 赛事名称——主标题
     */
    public Builder match_sub_title(ByteString match_sub_title) {
      this.match_sub_title = match_sub_title;
      return this;
    }

    /**
     * 赛事名称——副标题
     */
    public Builder host_team_name(ByteString host_team_name) {
      this.host_team_name = host_team_name;
      return this;
    }

    /**
     * 主队名称
     */
    public Builder host_team_logo(ByteString host_team_logo) {
      this.host_team_logo = host_team_logo;
      return this;
    }

    /**
     * 主队logo
     */
    public Builder guest_team_name(ByteString guest_team_name) {
      this.guest_team_name = guest_team_name;
      return this;
    }

    /**
     * 客队名称
     */
    public Builder guest_team_logo(ByteString guest_team_logo) {
      this.guest_team_logo = guest_team_logo;
      return this;
    }

    /**
     * 客队logo
     */
    public Builder host_team_score(Integer host_team_score) {
      this.host_team_score = host_team_score;
      return this;
    }

    /**
     * 主队得分
     */
    public Builder guest_team_score(Integer guest_team_score) {
      this.guest_team_score = guest_team_score;
      return this;
    }

    /**
     * 客队得分
     */
    public Builder room_id(ByteString room_id) {
      this.room_id = room_id;
      return this;
    }

    /**
     * 房间id[注意:多赛事请勿使用!]
     */
    public Builder vid(ByteString vid) {
      this.vid = vid;
      return this;
    }

    /**
     * 频道id[注意:多赛事请勿使用!]
     */
    public Builder online_num(Integer online_num) {
      this.online_num = online_num;
      return this;
    }

    /**
     * 在线人数,不要使用[注意:多赛事请勿使用!]
     */
    public Builder subcribe_state(Integer subcribe_state) {
      this.subcribe_state = subcribe_state;
      return this;
    }

    /**
     * 订阅状态, 0未订阅,1已订阅
     */
    public Builder room_type(Integer room_type) {
      this.room_type = room_type;
      return this;
    }

    /**
     * 房间类型,0: 腾讯视频, 1:鹅掌TV视频流[注意:多赛事请勿使用!]
     */
    public Builder record_vid_list(List<ByteString> record_vid_list) {
      this.record_vid_list = checkForNulls(record_vid_list);
      return this;
    }

    /**
     * 回访视频id列表
     */
    public Builder host_team_id(ByteString host_team_id) {
      this.host_team_id = host_team_id;
      return this;
    }

    /**
     * 主队id
     */
    public Builder guest_team_id(ByteString guest_team_id) {
      this.guest_team_id = guest_team_id;
      return this;
    }

    /**
     * 客队id
     */
    public Builder host_vote_num(ByteString host_vote_num) {
      this.host_vote_num = host_vote_num;
      return this;
    }

    /**
     * 主队得票数
     */
    public Builder guest_vote_num(ByteString guest_vote_num) {
      this.guest_vote_num = guest_vote_num;
      return this;
    }

    /**
     * 客队得票数
     */
    public Builder has_cheer(Boolean has_cheer) {
      this.has_cheer = has_cheer;
      return this;
    }

    @Override
    public MatchItem build() {
      checkRequiredFields();
      return new MatchItem(this);
    }
  }
}
