// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\auth.proto
package com.tencent.protocol.tga.auth;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REQUIRED;

/**
 * 0x1001-0x01 认证并获取票据 回包
 */
public final class AuthTokenRsp extends Message {

  public static final Integer DEFAULT_RESULT = 0;
  public static final ByteString DEFAULT_ERRMSG = ByteString.EMPTY;
  public static final ByteString DEFAULT_UUID = ByteString.EMPTY;
  public static final ByteString DEFAULT_OPENID = ByteString.EMPTY;
  public static final ByteString DEFAULT_AUTH_KEY = ByteString.EMPTY;
  public static final ByteString DEFAULT_ACCESS_TOKEN = ByteString.EMPTY;
  public static final Integer DEFAULT_TOKEN_EXPIRES = 0;

  @ProtoField(tag = 1, type = UINT32, label = REQUIRED)
  public final Integer result;

  /**
   * 结果，具体错误码见AuthTokenErrCode定义
   */
  @ProtoField(tag = 2, type = BYTES)
  public final ByteString errmsg;

  /**
   * 错误信息
   */
  @ProtoField(tag = 3, type = BYTES)
  public final ByteString uuid;

  /**
   * uuid，用户的QT身份ID
   */
  @ProtoField(tag = 4, type = BYTES)
  public final ByteString openid;

  /**
   * openid，用户的QT通道ID
   * auth_key加密签名，QQ登录用sso_gtk解密；
   * 微信登录用wx_gtk（将access_token进行一次md5，生成wx_gtk）解密；
   * 游客登录用默认key（*-l#_,L<19ai^R*p）解密；
   */
  @ProtoField(tag = 5, type = BYTES)
  public final ByteString auth_key;

  /**
   * 用sso_gtk或wx_gtk解密得到user_gtk
   */
  @ProtoField(tag = 6, type = BYTES)
  public final ByteString access_token;

  /**
   * 客户端透传票据，注册在线时使用
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer token_expires;

  public AuthTokenRsp(Integer result, ByteString errmsg, ByteString uuid, ByteString openid, ByteString auth_key, ByteString access_token, Integer token_expires) {
    this.result = result;
    this.errmsg = errmsg;
    this.uuid = uuid;
    this.openid = openid;
    this.auth_key = auth_key;
    this.access_token = access_token;
    this.token_expires = token_expires;
  }

  private AuthTokenRsp(Builder builder) {
    this(builder.result, builder.errmsg, builder.uuid, builder.openid, builder.auth_key, builder.access_token, builder.token_expires);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AuthTokenRsp)) return false;
    AuthTokenRsp o = (AuthTokenRsp) other;
    return equals(result, o.result)
        && equals(errmsg, o.errmsg)
        && equals(uuid, o.uuid)
        && equals(openid, o.openid)
        && equals(auth_key, o.auth_key)
        && equals(access_token, o.access_token)
        && equals(token_expires, o.token_expires);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = this.result != null ? this.result.hashCode() : 0;
      result = result * 37 + (errmsg != null ? errmsg.hashCode() : 0);
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (openid != null ? openid.hashCode() : 0);
      result = result * 37 + (auth_key != null ? auth_key.hashCode() : 0);
      result = result * 37 + (access_token != null ? access_token.hashCode() : 0);
      result = result * 37 + (token_expires != null ? token_expires.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<AuthTokenRsp> {

    public Integer result;
    public ByteString errmsg;
    public ByteString uuid;
    public ByteString openid;
    public ByteString auth_key;
    public ByteString access_token;
    public Integer token_expires;

    public Builder() {
    }

    public Builder(AuthTokenRsp message) {
      super(message);
      if (message == null) return;
      this.result = message.result;
      this.errmsg = message.errmsg;
      this.uuid = message.uuid;
      this.openid = message.openid;
      this.auth_key = message.auth_key;
      this.access_token = message.access_token;
      this.token_expires = message.token_expires;
    }

    public Builder result(Integer result) {
      this.result = result;
      return this;
    }

    /**
     * 结果，具体错误码见AuthTokenErrCode定义
     */
    public Builder errmsg(ByteString errmsg) {
      this.errmsg = errmsg;
      return this;
    }

    /**
     * 错误信息
     */
    public Builder uuid(ByteString uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * uuid，用户的QT身份ID
     */
    public Builder openid(ByteString openid) {
      this.openid = openid;
      return this;
    }

    /**
     * openid，用户的QT通道ID
     * auth_key加密签名，QQ登录用sso_gtk解密；
     * 微信登录用wx_gtk（将access_token进行一次md5，生成wx_gtk）解密；
     * 游客登录用默认key（*-l#_,L<19ai^R*p）解密；
     */
    public Builder auth_key(ByteString auth_key) {
      this.auth_key = auth_key;
      return this;
    }

    /**
     * 用sso_gtk或wx_gtk解密得到user_gtk
     */
    public Builder access_token(ByteString access_token) {
      this.access_token = access_token;
      return this;
    }

    /**
     * 客户端透传票据，注册在线时使用
     */
    public Builder token_expires(Integer token_expires) {
      this.token_expires = token_expires;
      return this;
    }

    @Override
    public AuthTokenRsp build() {
      checkRequiredFields();
      return new AuthTokenRsp(this);
    }
  }
}
