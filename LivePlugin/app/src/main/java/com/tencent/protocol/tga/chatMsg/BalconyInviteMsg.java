// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\chat_msg.proto
package com.tencent.protocol.tga.chatMsg;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REQUIRED;

/**
 * 包厢邀请消息
 */
public final class BalconyInviteMsg extends Message {

  public static final ByteString DEFAULT_INVITER_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_INVITER_NICK = ByteString.EMPTY;
  public static final ByteString DEFAULT_INVITER_FACE = ByteString.EMPTY;
  public static final ByteString DEFAULT_GUEST_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_MATCH_MAIN_TITLE = ByteString.EMPTY;
  public static final ByteString DEFAULT_MATCH_SUB_TITLE = ByteString.EMPTY;
  public static final Integer DEFAULT_RELATION_TYPE = 0;
  public static final Integer DEFAULT_RANK_CLASS = 0;
  public static final ByteString DEFAULT_INVITER_FRAME = ByteString.EMPTY;
  public static final ByteString DEFAULT_INVITER_GENDER = ByteString.EMPTY;
  public static final ByteString DEFAULT_BALCONY_ID = ByteString.EMPTY;

  @ProtoField(tag = 1, type = BYTES, label = REQUIRED)
  public final ByteString inviter_id;

  /**
   * 用户id
   */
  @ProtoField(tag = 2, type = BYTES, label = REQUIRED)
  public final ByteString inviter_nick;

  /**
   * 用户昵称
   */
  @ProtoField(tag = 3, type = BYTES, label = REQUIRED)
  public final ByteString inviter_face;

  /**
   * 用户头像
   */
  @ProtoField(tag = 4, type = BYTES, label = REQUIRED)
  public final ByteString guest_id;

  /**
   * 被邀请人id
   */
  @ProtoField(tag = 5, type = BYTES)
  public final ByteString match_main_title;

  /**
   * 赛事主标题
   */
  @ProtoField(tag = 6, type = BYTES)
  public final ByteString match_sub_title;

  /**
   * 赛事副标题
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer relation_type;

  /**
   * 关系类型,0好友,1战队
   */
  @ProtoField(tag = 8, type = UINT32)
  public final Integer rank_class;

  /**
   * 排位等级
   */
  @ProtoField(tag = 9, type = BYTES)
  public final ByteString inviter_frame;

  /**
   * 用户头像框
   */
  @ProtoField(tag = 10, type = BYTES)
  public final ByteString inviter_gender;

  /**
   * 邀请者性别
   */
  @ProtoField(tag = 11, type = BYTES)
  public final ByteString balcony_id;

  public BalconyInviteMsg(ByteString inviter_id, ByteString inviter_nick, ByteString inviter_face, ByteString guest_id, ByteString match_main_title, ByteString match_sub_title, Integer relation_type, Integer rank_class, ByteString inviter_frame, ByteString inviter_gender, ByteString balcony_id) {
    this.inviter_id = inviter_id;
    this.inviter_nick = inviter_nick;
    this.inviter_face = inviter_face;
    this.guest_id = guest_id;
    this.match_main_title = match_main_title;
    this.match_sub_title = match_sub_title;
    this.relation_type = relation_type;
    this.rank_class = rank_class;
    this.inviter_frame = inviter_frame;
    this.inviter_gender = inviter_gender;
    this.balcony_id = balcony_id;
  }

  private BalconyInviteMsg(Builder builder) {
    this(builder.inviter_id, builder.inviter_nick, builder.inviter_face, builder.guest_id, builder.match_main_title, builder.match_sub_title, builder.relation_type, builder.rank_class, builder.inviter_frame, builder.inviter_gender, builder.balcony_id);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BalconyInviteMsg)) return false;
    BalconyInviteMsg o = (BalconyInviteMsg) other;
    return equals(inviter_id, o.inviter_id)
        && equals(inviter_nick, o.inviter_nick)
        && equals(inviter_face, o.inviter_face)
        && equals(guest_id, o.guest_id)
        && equals(match_main_title, o.match_main_title)
        && equals(match_sub_title, o.match_sub_title)
        && equals(relation_type, o.relation_type)
        && equals(rank_class, o.rank_class)
        && equals(inviter_frame, o.inviter_frame)
        && equals(inviter_gender, o.inviter_gender)
        && equals(balcony_id, o.balcony_id);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = inviter_id != null ? inviter_id.hashCode() : 0;
      result = result * 37 + (inviter_nick != null ? inviter_nick.hashCode() : 0);
      result = result * 37 + (inviter_face != null ? inviter_face.hashCode() : 0);
      result = result * 37 + (guest_id != null ? guest_id.hashCode() : 0);
      result = result * 37 + (match_main_title != null ? match_main_title.hashCode() : 0);
      result = result * 37 + (match_sub_title != null ? match_sub_title.hashCode() : 0);
      result = result * 37 + (relation_type != null ? relation_type.hashCode() : 0);
      result = result * 37 + (rank_class != null ? rank_class.hashCode() : 0);
      result = result * 37 + (inviter_frame != null ? inviter_frame.hashCode() : 0);
      result = result * 37 + (inviter_gender != null ? inviter_gender.hashCode() : 0);
      result = result * 37 + (balcony_id != null ? balcony_id.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<BalconyInviteMsg> {

    public ByteString inviter_id;
    public ByteString inviter_nick;
    public ByteString inviter_face;
    public ByteString guest_id;
    public ByteString match_main_title;
    public ByteString match_sub_title;
    public Integer relation_type;
    public Integer rank_class;
    public ByteString inviter_frame;
    public ByteString inviter_gender;
    public ByteString balcony_id;

    public Builder() {
    }

    public Builder(BalconyInviteMsg message) {
      super(message);
      if (message == null) return;
      this.inviter_id = message.inviter_id;
      this.inviter_nick = message.inviter_nick;
      this.inviter_face = message.inviter_face;
      this.guest_id = message.guest_id;
      this.match_main_title = message.match_main_title;
      this.match_sub_title = message.match_sub_title;
      this.relation_type = message.relation_type;
      this.rank_class = message.rank_class;
      this.inviter_frame = message.inviter_frame;
      this.inviter_gender = message.inviter_gender;
      this.balcony_id = message.balcony_id;
    }

    public Builder inviter_id(ByteString inviter_id) {
      this.inviter_id = inviter_id;
      return this;
    }

    /**
     * 用户id
     */
    public Builder inviter_nick(ByteString inviter_nick) {
      this.inviter_nick = inviter_nick;
      return this;
    }

    /**
     * 用户昵称
     */
    public Builder inviter_face(ByteString inviter_face) {
      this.inviter_face = inviter_face;
      return this;
    }

    /**
     * 用户头像
     */
    public Builder guest_id(ByteString guest_id) {
      this.guest_id = guest_id;
      return this;
    }

    /**
     * 被邀请人id
     */
    public Builder match_main_title(ByteString match_main_title) {
      this.match_main_title = match_main_title;
      return this;
    }

    /**
     * 赛事主标题
     */
    public Builder match_sub_title(ByteString match_sub_title) {
      this.match_sub_title = match_sub_title;
      return this;
    }

    /**
     * 赛事副标题
     */
    public Builder relation_type(Integer relation_type) {
      this.relation_type = relation_type;
      return this;
    }

    /**
     * 关系类型,0好友,1战队
     */
    public Builder rank_class(Integer rank_class) {
      this.rank_class = rank_class;
      return this;
    }

    /**
     * 排位等级
     */
    public Builder inviter_frame(ByteString inviter_frame) {
      this.inviter_frame = inviter_frame;
      return this;
    }

    /**
     * 用户头像框
     */
    public Builder inviter_gender(ByteString inviter_gender) {
      this.inviter_gender = inviter_gender;
      return this;
    }

    /**
     * 邀请者性别
     */
    public Builder balcony_id(ByteString balcony_id) {
      this.balcony_id = balcony_id;
      return this;
    }

    @Override
    public BalconyInviteMsg build() {
      checkRequiredFields();
      return new BalconyInviteMsg(this);
    }
  }
}
