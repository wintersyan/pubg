// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\expressmsg.proto
package com.tencent.protocol.tga.expressmsg;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REQUIRED;

public final class ExpressMsg extends Message {

  public static final Integer DEFAULT_BUSINESS_TYPE = 0;
  public static final ByteString DEFAULT_TITLE = ByteString.EMPTY;
  public static final ByteString DEFAULT_CONTENT = ByteString.EMPTY;
  public static final Integer DEFAULT_MSG_SEQ = 0;
  public static final ByteString DEFAULT_ROOMID = ByteString.EMPTY;

  @ProtoField(tag = 1, type = UINT32, label = REQUIRED)
  public final Integer business_type;

  /**
   * 业务类型
   */
  @ProtoField(tag = 2, type = BYTES)
  public final ByteString title;

  /**
   * 标题
   */
  @ProtoField(tag = 3, type = BYTES, label = REQUIRED)
  public final ByteString content;

  /**
   * 内容
   */
  @ProtoField(tag = 4, type = UINT32, label = REQUIRED)
  public final Integer msg_seq;

  /**
   * 消息序列号,方便跟踪消息流向(业务自身填写)
   */
  @ProtoField(tag = 5, type = BYTES)
  public final ByteString roomid;

  public ExpressMsg(Integer business_type, ByteString title, ByteString content, Integer msg_seq, ByteString roomid) {
    this.business_type = business_type;
    this.title = title;
    this.content = content;
    this.msg_seq = msg_seq;
    this.roomid = roomid;
  }

  private ExpressMsg(Builder builder) {
    this(builder.business_type, builder.title, builder.content, builder.msg_seq, builder.roomid);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ExpressMsg)) return false;
    ExpressMsg o = (ExpressMsg) other;
    return equals(business_type, o.business_type)
        && equals(title, o.title)
        && equals(content, o.content)
        && equals(msg_seq, o.msg_seq)
        && equals(roomid, o.roomid);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = business_type != null ? business_type.hashCode() : 0;
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (msg_seq != null ? msg_seq.hashCode() : 0);
      result = result * 37 + (roomid != null ? roomid.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ExpressMsg> {

    public Integer business_type;
    public ByteString title;
    public ByteString content;
    public Integer msg_seq;
    public ByteString roomid;

    public Builder() {
    }

    public Builder(ExpressMsg message) {
      super(message);
      if (message == null) return;
      this.business_type = message.business_type;
      this.title = message.title;
      this.content = message.content;
      this.msg_seq = message.msg_seq;
      this.roomid = message.roomid;
    }

    public Builder business_type(Integer business_type) {
      this.business_type = business_type;
      return this;
    }

    /**
     * 业务类型
     */
    public Builder title(ByteString title) {
      this.title = title;
      return this;
    }

    /**
     * 标题
     */
    public Builder content(ByteString content) {
      this.content = content;
      return this;
    }

    /**
     * 内容
     */
    public Builder msg_seq(Integer msg_seq) {
      this.msg_seq = msg_seq;
      return this;
    }

    /**
     * 消息序列号,方便跟踪消息流向(业务自身填写)
     */
    public Builder roomid(ByteString roomid) {
      this.roomid = roomid;
      return this;
    }

    @Override
    public ExpressMsg build() {
      checkRequiredFields();
      return new ExpressMsg(this);
    }
  }
}
