// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\chat_msg.proto
package com.tencent.protocol.tga.chatMsg;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REQUIRED;

/**
 * 聊天消息
 */
public final class ChatMsg extends Message {

  public static final ByteString DEFAULT_TEXT_MSG = ByteString.EMPTY;
  public static final Integer DEFAULT_SEQ = 0;
  public static final Integer DEFAULT_DATE_TIME = 0;
  public static final ByteString DEFAULT_UID = ByteString.EMPTY;
  public static final ByteString DEFAULT_NICK = ByteString.EMPTY;
  public static final ByteString DEFAULT_GAME_ID = ByteString.EMPTY;
  public static final Integer DEFAULT_AREA_ID = 0;
  public static final Integer DEFAULT_MSG_TYPE = 0;
  public static final Integer DEFAULT_SUPPORT_TEAM_FLAG = 0;
  public static final Integer DEFAULT_HOT_WORD_ID = 0;
  public static final ByteString DEFAULT_FACE = ByteString.EMPTY;
  public static final ByteString DEFAULT_BADGE_ID = ByteString.EMPTY;
  public static final ByteString DEFAULT_ROOM_ID = ByteString.EMPTY;

  @ProtoField(tag = 1, type = BYTES, label = REQUIRED)
  public final ByteString text_msg;

  /**
   * 文本消息
   */
  @ProtoField(tag = 2, type = UINT32)
  public final Integer seq;

  /**
   * 消息序列号，唯一标识一条消息，可以用来去重
   */
  @ProtoField(tag = 3, type = UINT32)
  public final Integer date_time;

  /**
   * 发送消息的时间
   */
  @ProtoField(tag = 4, type = BYTES, label = REQUIRED)
  public final ByteString uid;

  /**
   * uid
   */
  @ProtoField(tag = 5, type = BYTES)
  public final ByteString nick;

  /**
   * 用户昵称
   */
  @ProtoField(tag = 6, type = BYTES)
  public final ByteString game_id;

  /**
   * sdk的gameid
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer area_id;

  /**
   * 大区id
   */
  @ProtoField(tag = 8, type = UINT32)
  public final Integer msg_type;

  /**
   * 消息类型,0:普通消息,1:热词
   */
  @ProtoField(tag = 9, type = UINT32)
  public final Integer support_team_flag;

  /**
   * 战队支持标志,0:主队,1:客队,2:无支持状态
   */
  @ProtoField(tag = 10, type = UINT32)
  public final Integer hot_word_id;

  /**
   * 带上热词id
   */
  @ProtoField(tag = 11, type = BYTES)
  public final ByteString face;

  /**
   * 头像
   */
  @ProtoField(tag = 12, type = BYTES)
  public final ByteString badge_id;

  /**
   * 徽章id
   */
  @ProtoField(tag = 13, type = BYTES)
  public final ByteString room_id;

  public ChatMsg(ByteString text_msg, Integer seq, Integer date_time, ByteString uid, ByteString nick, ByteString game_id, Integer area_id, Integer msg_type, Integer support_team_flag, Integer hot_word_id, ByteString face, ByteString badge_id, ByteString room_id) {
    this.text_msg = text_msg;
    this.seq = seq;
    this.date_time = date_time;
    this.uid = uid;
    this.nick = nick;
    this.game_id = game_id;
    this.area_id = area_id;
    this.msg_type = msg_type;
    this.support_team_flag = support_team_flag;
    this.hot_word_id = hot_word_id;
    this.face = face;
    this.badge_id = badge_id;
    this.room_id = room_id;
  }

  private ChatMsg(Builder builder) {
    this(builder.text_msg, builder.seq, builder.date_time, builder.uid, builder.nick, builder.game_id, builder.area_id, builder.msg_type, builder.support_team_flag, builder.hot_word_id, builder.face, builder.badge_id, builder.room_id);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChatMsg)) return false;
    ChatMsg o = (ChatMsg) other;
    return equals(text_msg, o.text_msg)
        && equals(seq, o.seq)
        && equals(date_time, o.date_time)
        && equals(uid, o.uid)
        && equals(nick, o.nick)
        && equals(game_id, o.game_id)
        && equals(area_id, o.area_id)
        && equals(msg_type, o.msg_type)
        && equals(support_team_flag, o.support_team_flag)
        && equals(hot_word_id, o.hot_word_id)
        && equals(face, o.face)
        && equals(badge_id, o.badge_id)
        && equals(room_id, o.room_id);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = text_msg != null ? text_msg.hashCode() : 0;
      result = result * 37 + (seq != null ? seq.hashCode() : 0);
      result = result * 37 + (date_time != null ? date_time.hashCode() : 0);
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (nick != null ? nick.hashCode() : 0);
      result = result * 37 + (game_id != null ? game_id.hashCode() : 0);
      result = result * 37 + (area_id != null ? area_id.hashCode() : 0);
      result = result * 37 + (msg_type != null ? msg_type.hashCode() : 0);
      result = result * 37 + (support_team_flag != null ? support_team_flag.hashCode() : 0);
      result = result * 37 + (hot_word_id != null ? hot_word_id.hashCode() : 0);
      result = result * 37 + (face != null ? face.hashCode() : 0);
      result = result * 37 + (badge_id != null ? badge_id.hashCode() : 0);
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ChatMsg> {

    public ByteString text_msg;
    public Integer seq;
    public Integer date_time;
    public ByteString uid;
    public ByteString nick;
    public ByteString game_id;
    public Integer area_id;
    public Integer msg_type;
    public Integer support_team_flag;
    public Integer hot_word_id;
    public ByteString face;
    public ByteString badge_id;
    public ByteString room_id;

    public Builder() {
    }

    public Builder(ChatMsg message) {
      super(message);
      if (message == null) return;
      this.text_msg = message.text_msg;
      this.seq = message.seq;
      this.date_time = message.date_time;
      this.uid = message.uid;
      this.nick = message.nick;
      this.game_id = message.game_id;
      this.area_id = message.area_id;
      this.msg_type = message.msg_type;
      this.support_team_flag = message.support_team_flag;
      this.hot_word_id = message.hot_word_id;
      this.face = message.face;
      this.badge_id = message.badge_id;
      this.room_id = message.room_id;
    }

    public Builder text_msg(ByteString text_msg) {
      this.text_msg = text_msg;
      return this;
    }

    /**
     * 文本消息
     */
    public Builder seq(Integer seq) {
      this.seq = seq;
      return this;
    }

    /**
     * 消息序列号，唯一标识一条消息，可以用来去重
     */
    public Builder date_time(Integer date_time) {
      this.date_time = date_time;
      return this;
    }

    /**
     * 发送消息的时间
     */
    public Builder uid(ByteString uid) {
      this.uid = uid;
      return this;
    }

    /**
     * uid
     */
    public Builder nick(ByteString nick) {
      this.nick = nick;
      return this;
    }

    /**
     * 用户昵称
     */
    public Builder game_id(ByteString game_id) {
      this.game_id = game_id;
      return this;
    }

    /**
     * sdk的gameid
     */
    public Builder area_id(Integer area_id) {
      this.area_id = area_id;
      return this;
    }

    /**
     * 大区id
     */
    public Builder msg_type(Integer msg_type) {
      this.msg_type = msg_type;
      return this;
    }

    /**
     * 消息类型,0:普通消息,1:热词
     */
    public Builder support_team_flag(Integer support_team_flag) {
      this.support_team_flag = support_team_flag;
      return this;
    }

    /**
     * 战队支持标志,0:主队,1:客队,2:无支持状态
     */
    public Builder hot_word_id(Integer hot_word_id) {
      this.hot_word_id = hot_word_id;
      return this;
    }

    /**
     * 带上热词id
     */
    public Builder face(ByteString face) {
      this.face = face;
      return this;
    }

    /**
     * 头像
     */
    public Builder badge_id(ByteString badge_id) {
      this.badge_id = badge_id;
      return this;
    }

    /**
     * 徽章id
     */
    public Builder room_id(ByteString room_id) {
      this.room_id = room_id;
      return this;
    }

    @Override
    public ChatMsg build() {
      checkRequiredFields();
      return new ChatMsg(this);
    }
  }
}
