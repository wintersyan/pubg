// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\\conn.proto
package com.tencent.protocol.tga.conn;

import com.squareup.tga.Message;
import com.squareup.tga.ProtoField;
import java.util.Collections;
import java.util.List;
import okiotga.ByteString;

import static com.squareup.tga.Message.Datatype.BYTES;
import static com.squareup.tga.Message.Datatype.UINT32;
import static com.squareup.tga.Message.Label.REPEATED;
import static com.squareup.tga.Message.Label.REQUIRED;

/**
 * SUBCMD_CONN_ROOM_LEAVE	= 0x12	退房请求。
 */
public final class Room_LeaveReq extends Message {

  public static final ByteString DEFAULT_ROOMID = ByteString.EMPTY;
  public static final List<ByteString> DEFAULT_BALCONY_LIST = Collections.emptyList();
  public static final Integer DEFAULT_LEAVE_TYPE = 0;
  public static final ByteString DEFAULT_USER_NICK = ByteString.EMPTY;

  @ProtoField(tag = 1, type = BYTES, label = REQUIRED)
  public final ByteString roomid;

  /**
   * 大厅id
   */
  @ProtoField(tag = 2, type = BYTES, label = REPEATED)
  public final List<ByteString> balcony_list;

  /**
   * 包厢id列表
   */
  @ProtoField(tag = 3, type = UINT32)
  public final Integer leave_type;

  /**
   * 包厢退房类型,0暂时退房-同时退大厅和包厢,1永久退房-只退包厢,2暂时退房-只退大厅
   */
  @ProtoField(tag = 4, type = BYTES)
  public final ByteString user_nick;

  public Room_LeaveReq(ByteString roomid, List<ByteString> balcony_list, Integer leave_type, ByteString user_nick) {
    this.roomid = roomid;
    this.balcony_list = immutableCopyOf(balcony_list);
    this.leave_type = leave_type;
    this.user_nick = user_nick;
  }

  private Room_LeaveReq(Builder builder) {
    this(builder.roomid, builder.balcony_list, builder.leave_type, builder.user_nick);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Room_LeaveReq)) return false;
    Room_LeaveReq o = (Room_LeaveReq) other;
    return equals(roomid, o.roomid)
        && equals(balcony_list, o.balcony_list)
        && equals(leave_type, o.leave_type)
        && equals(user_nick, o.user_nick);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = roomid != null ? roomid.hashCode() : 0;
      result = result * 37 + (balcony_list != null ? balcony_list.hashCode() : 1);
      result = result * 37 + (leave_type != null ? leave_type.hashCode() : 0);
      result = result * 37 + (user_nick != null ? user_nick.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Room_LeaveReq> {

    public ByteString roomid;
    public List<ByteString> balcony_list;
    public Integer leave_type;
    public ByteString user_nick;

    public Builder() {
    }

    public Builder(Room_LeaveReq message) {
      super(message);
      if (message == null) return;
      this.roomid = message.roomid;
      this.balcony_list = copyOf(message.balcony_list);
      this.leave_type = message.leave_type;
      this.user_nick = message.user_nick;
    }

    public Builder roomid(ByteString roomid) {
      this.roomid = roomid;
      return this;
    }

    /**
     * 大厅id
     */
    public Builder balcony_list(List<ByteString> balcony_list) {
      this.balcony_list = checkForNulls(balcony_list);
      return this;
    }

    /**
     * 包厢id列表
     */
    public Builder leave_type(Integer leave_type) {
      this.leave_type = leave_type;
      return this;
    }

    /**
     * 包厢退房类型,0暂时退房-同时退大厅和包厢,1永久退房-只退包厢,2暂时退房-只退大厅
     */
    public Builder user_nick(ByteString user_nick) {
      this.user_nick = user_nick;
      return this;
    }

    @Override
    public Room_LeaveReq build() {
      checkRequiredFields();
      return new Room_LeaveReq(this);
    }
  }
}
